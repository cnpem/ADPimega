# pimega.template
# Medipix Area Detector extensions
#
#
# Parameters:
#% macro, P,        EPICS name prefix
#% macro, R,        EPICS name suffix
#% macro, PORT,     Asyn port
#% macro, ADDR,     Asyn Address
#% macro, TIMEOUT,  Asyn communications timeout
#% macro, XSIZE,    Maximum size of X histograms
#% macro, YSIZE,    Maximum size of Y histograms

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, pimegaDetector.edl, P=$(P),R=$(R)
##  gdatag, template, pimega, $(PORT)_pimega, pimega detector

include "ADBase.template"
include "NDFile.template"

##########################################################################
# Disable records from ADBase etc. that we do not use for pimega
##########################################################################

record(waveform, "$(P)$(R)ArrayData")
{
	field(SCAN, "2 second")
}


record(calcout,"$(P)$(R)UpdateScan")
{
	field(INPA, "$(P)$(R)Acquire CPP NMS")
	field(CALC, "(A)==1?2:4")
	field(OUT,  "$(P)$(R)TemperatureActual.SCAN PP")
}

record(dfanout,"$(P)$(R)CaptureAcquire")
{
	field(OUTA, "$(P)$(R)Capture PP")
	field(OUTB, "$(P)$(R)Acquire PP")
}

record(dfanout,"$(P)$(R)AcquireCapture")
{
	field(OUTA, "$(P)$(R)Acquire PP")
	field(OUTB, "$(P)$(R)Capture PP")
}



record(ao, "$(P)$(R)Gain")
{
	#field(DISA, "1")
}

record(ai, "$(P)$(R)Gain_RBV")
{
	#field(DISA, "1")
}

record(ai, "$(P)$(R)TimeRemaining_RBV")
{
	field(SCAN, ".5 second")
   	field(EGU, "s")
}

record(longout, "$(P)$(R)NumCapture")
{
	field(DRVH, "2147483647")
	field(DRVL, "0")	
}


# We redefine the states for the TriggerMode records defined in ADBase.template
record(mbbo,"$(P)$(R)TriggerMode") {
	field(DESC,"Trigger mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"External")
#    field(TWVL,"2")
#    field(TWST,"Alignment")	
#    field(IVOA, "Don't drive outputs")
}


record(mbbi,"$(P)$(R)TriggerMode_RBV") {
	field(DESC,"Trigger mode")
    field(ZRVL,"0")
    field(ZRST,"Internal")
    field(ONVL,"1")
    field(ONST,"External")
#    field(TWVL,"2")
#    field(TWST,"Alignment")	
}

# Add new items for the ImageMode records defined in ADBase.template
#record(mbbo,"$(P)$(R)ImageMode") {
#	field(THST,"Threshold")
#	field(THVL,"3")
#	field(FRST,"TestPulse")
#	field(FRVL,"4")
#}
#
#record(mbbi,"$(P)$(R)ImageMode_RBV") {
#	field(THST,"Threshold")
#	field(THVL,"3")
#	field(FRST,"TestPulse")
#	field(FRVL,"4")
#}

record(ao, "$(P)$(R)AcquireTime")
{
	field(DRVH, "18446744073709551615e-6")
	field(DRVL, "1e-6")
	field(PREC, 6)
}


record(longout, "$(P)$(R)NumExposures")
{
	field(DRVH, "2147483647")
	field(DRVL, "1")
}


record(ao, "$(P)$(R)PeriodTime")
{
	field(PREC, 6)
}

#Select Pimega Module
record(mbbo, "$(P)$(R)PimegaModule") {
	field(DESC, "Pimega Module")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PIMEGA_MODULE")
	field(ZRSV, "INVALID")
	field(ONST, "Module 1")					field(ONVL, "1")
	field(TWST, "Module 2")         		field(TWVL, "2")
	field(THST, "Module 3")					field(THVL, "3")
	field(FRST, "Module 4")   				field(FRVL, "4")
	field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(IVOA, "1")
	field(VAL, 	"1")
}

record(mbbi, "$(P)$(R)PimegaModule_RBV") {
	field(DESC, "Pimega Module ReadBack")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PIMEGA_MODULE")
	field(ONST, "Module 1")					field(ONVL, "1")
	field(TWST, "Module 2")         		field(TWVL, "2")
	field(THST, "Module 3")					field(THVL, "3")
	field(FRST, "Module 4")   				field(FRVL, "4")
	field(SCAN, ".1 second")
}

#Medipix Acquire Mode
record(mbbo, "$(P)$(R)MedipixMode") {
	field(DESC, "Medipix Acquire Mode")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MEDIPIX_MODE")
	field(ZRST, "Default")        			field(ZRVL, "0")
	field(ONST, "Continuous Read Write")	field(ONVL, "1")
	field(TWST, "Full Dynamic Range")   	field(TWVL, "2")
	field(THST, "Dual Energy")         		field(THVL, "3")
	field(VAL, 	"0")
}

record(mbbi, "$(P)$(R)MedipixMode_RBV") {
	field(DESC, "Medipix Acquire Mode Readback")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MEDIPIX_MODE")
	field(ZRST, "Default")        			field(ZRVL, "0")
	field(ONST, "Continuous Read Write")	field(ONVL, "1")
	field(TWST, "Full Dynamic Range")   	field(TWVL, "2")
	field(THST, "Dual Energy")         		field(THVL, "3")
	field(SCAN, "I/O Intr")
}

#ExtBgIn
record(ao, "$(P)$(R)ExtBgIn") {
	field(DESC, "Set external Band-Gap voltage")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EXT_BGIN")
}

record(ai, "$(P)$(R)ExtBgIn_RBV") {
	field(DESC, "Set external Band-Gap voltage Readback")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EXT_BGIN")
	field(SCAN, "I/O Intr")
}

#e-Fuse chip ID
record(waveform, "$(P)$(R)eFuseID_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EFUSE_ID")
    field(FTVL, "CHAR")
    field(NELM, "8")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)dac_defaults_files")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DAC_DEFAULTS")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(P)$(R)dac_defaults_files_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DAC_DEFAULTS")
    field(FTVL, "CHAR")
    field(NELM, "256")
	field(SCAN, "I/O Intr")
}

#SensorBias
record(ao, "$(P)$(R)SensorBias") {
	field(DESC, "Sensor Bias Voltage Flex Low/High")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSOR_BIAS")
}

record(ai, "$(P)$(R)SensorBias_RBV") {
	field(DESC, "Sensor Bias Voltage Flex Readback")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSOR_BIAS")
	field(SCAN, "I/O Intr")
}

#ThresholdEnergy
record(ao, "$(P)$(R)ThresholdEnergy") {
	field(DESC, "Threshold Energy")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD_ENERGY")
}

record(ai, "$(P)$(R)ThresholdEnergy_RBV") {
	field(DESC, "Threshold Energy Readback")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD_ENERGY")
	field(SCAN, "I/O Intr")
}

# Read Counter
record(mbbo, "$(P)$(R)ReadCounter") {
	field(DESC, "Selects the counter(s) to be read")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))READ_COUNTER")
	#field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(VAL, "0")
	field(ZRST, "Counter Low")      field(ZRVL, "0")
	field(ONST, "Counter High")     field(ONVL, "1")
	field(TWST, "Both Counters")	field(TWVL, "2")
	field(THSV, "INVALID")
	field(FRSV, "INVALID")
    field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(IVOA, "1")
}

record(mbbi, "$(P)$(R)ReadCounter_RBV") {
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))READ_COUNTER")
	field(DESC, "Selects the counter(s) to be read RBV")
	field(ZRST, "Counter Low")      field(ZRVL, "0")
	field(ONST, "Counter High")     field(ONVL, "1")
	field(TWST, "Both Counters")	field(TWVL, "2")
	field(SCAN, "I/O Intr")
}

# OMR Operation mode
record(mbbo,"$(P)$(R)OmrOMSelec") {
	#field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OMR_OP_MODE")
	field(DESC, "OMR operation mode selection")
    field(ZRVL,"0")
    field(ONVL,"1")
    field(TWVL,"2")
    field(THVL,"3")
    field(FRVL,"4")
    field(FVVL,"5")
    field(SXVL,"6")
    field(SVVL,"7")
    field(ZRST, "Read Counter Low")
    field(ONST, "Read Counter High")
    field(TWST, "Load Counter Low")
    field(THST, "Load Counter High")
    field(FRST, "Load DACs")
    field(FVST, "Load CTPR")
    field(SXST, "Read DACs")
    field(SVST, "Read OMR and ID")
    field(VAL, "1")
}

record(mbbi,"$(P)$(R)OmrOMSelec_RBV") {
   	field(DTYP, "asynInt32")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))OMR_OP_MODE")
    field(DESC, "OMR  operation mode selection readback")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(FVVL, "5")
    field(SXVL, "6")
    field(SVVL, "7")
   	field(ZRST, "Read Counter Low")
    field(ONST, "Read Counter High")
    field(TWST, "Load Counter Low")
    field(THST, "Load Counter High")
    field(FRST, "Load DACs")
    field(FVST, "Load CTPR")
    field(SXST, "Read DACs")
    field(SVST, "Read OMR and ID")
   	field(SCAN, "I/O Intr")
}

# Gain mode - Selects the sensor gain mode
record(mbbo,"$(P)$(R)GainMode") {
   	#field(PINI, "YES")
   	field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))GAIN_MODE")
    field(DESC, "Sensor gain mode")
    field(ZRVL, "0")
    field(ZRST, "Super High gain")
    field(ONVL, "1")
    field(ONST, "Low gain")
    field(TWVL, "2")
    field(TWST, "High gain")
    field(THVL, "3")
    field(THST, "Super Low gain")
}

record(mbbi,"$(P)$(R)GainMode_RBV") {
   	field(DTYP, "asynInt32")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))GAIN_MODE")
    field(DESC, "Sensor gain mode readback")
    field(ZRVL, "0")
    field(ZRST, "Super High gain")
    field(ONVL, "1")
    field(ONST, "Low gain")
    field(TWVL, "2")
    field(TWST, "High gain")
    field(THVL, "3")
    field(THST, "Super Low gain")
   	field(SCAN, "I/O Intr")
}

# Sense Dac Selection
record(ao, "$(P)$(R)SenseDacSel")
{
	field(DESC, "Select DAC code to be monitored")
	#field(PINI, "YES")
   	field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSE_DAC_SEL")
   	field(VAL,  "0")
}

record(ai, "$(P)$(R)SenseDacSel_RBV")
{
   	field(DESC, "Select DAC code to be monitored readback")
   	field(DTYP, "asynInt32")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSE_DAC_SEL")
   	field(SCAN,  "I/O Intr")
}

record(ai, "$(P)$(R)DacOutSense_RBV") {
	field(DESC, "Dac voltage monitor")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DAC_OUT_SENSE")
	field(SCAN, "I/O Intr")
	field(PREC, "8")
}

record(waveform, "$(P)$(R)DacsOutSense_RBV") {
	field(DESC, "Dacs voltages monitor")
	field(NELM, "31")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DACS_OUT_SENSE")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ReadMBTemperature") {
	field(DESC, "Process Read MB Temperatures")
	field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))READ_MB_TEMPERATURE")
	field(HIGH, "0.01")
}

record(waveform, "$(P)$(R)M1:MB_Temperature_RBV") {
	field(DESC, "All Temperatures on MB sensors M1")
	field(NELM, "48")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_TEMPERATURE_M1")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}

record(ai,"$(P)$(R)M1:MB_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_AVG_TSENSOR_M1")
    field(DESC, "MFB Avg Temperature Mod 1 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
	
}

record(waveform, "$(P)$(R)M2:MB_Temperature_RBV") {
	field(DESC, "All Temperatures on MFB sensors M2")
	field(NELM, "48")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_TEMPERATURE_M2")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}

record(ai,"$(P)$(R)M2:MB_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_AVG_TSENSOR_M2")
    field(DESC, "MFB Avg Temperature Mod 2 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
}

record(waveform, "$(P)$(R)M3:MB_Temperature_RBV") {
	field(DESC, "All Temperatures on MFB sensors M3")
	field(NELM, "48")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_TEMPERATURE_M3")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}

record(ai,"$(P)$(R)M3:MB_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_AVG_TSENSOR_M3")
    field(DESC, "MFB Avg Temperature Mod 3 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
}

record(waveform, "$(P)$(R)M4:MB_Temperature_RBV") {
	field(DESC, "All Temperatures on MFB sensors M4")
	field(NELM, "48")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_TEMPERATURE_M4")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}

record(ai,"$(P)$(R)M4:MB_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_AVG_TSENSOR_M4")
    field(DESC, "MFB Avg Temperature Mod 4 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
}

record(longout, "$(P)$(R)MB_SensorNumber") {
    field(DTYP,"Soft Channel")
	field(VAL, "16")
}

record(longout, "$(P)$(R)MB_Number") {
    field(DTYP,"Soft Channel")
	field(VAL, "3")
}

record(waveform, "$(P)$(R)M1:Sensor_Temperature_RBV") {
	field(DESC, "All sensors temperatures  on M1")
	field(NELM, "36")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSOR_TEMPERATURE_M1")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}

record(waveform, "$(P)$(R)M2:Sensor_Temperature_RBV") {
	field(DESC, "All sensors temperatures  on M2")
	field(NELM, "36")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSOR_TEMPERATURE_M2")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}

record(waveform, "$(P)$(R)M3:Sensor_Temperature_RBV") {
	field(DESC, "All sensors temperatures  on M3")
	field(NELM, "36")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSOR_TEMPERATURE_M3")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}

record(waveform, "$(P)$(R)M4:Sensor_Temperature_RBV") {
	field(DESC, "All sensors temperatures  on M4")
	field(NELM, "36")
	field(FTVL, "FLOAT")
	field(DTYP, "asynFloat32ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SENSOR_TEMPERATURE_M4")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
}


record(bo, "$(P)$(R)ReadSensorsTemperature") {
	field(DESC, "Process Read Sensors Temperatures")
	field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))READ_SENSOR_TEMPERATURE")
	field(HIGH, "0.01")
}

#Module 1
record(ai,"$(P)$(R)M1:Medipix_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MP_AVG_TSENSOR_M1")
    field(DESC, "Medipix Avg Temperature Mod 1 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
}

#Module 2
record(ai,"$(P)$(R)M2:Medipix_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MP_AVG_TSENSOR_M2")
    field(DESC, "Medipix Avg Temperature Mod 3 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
}

#Module 3
record(ai,"$(P)$(R)M3:Medipix_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MP_AVG_TSENSOR_M3")
    field(DESC, "Medipix Avg Temperature Mod 3 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
}

#Module 4
record(ai,"$(P)$(R)M4:Medipix_AvgTemperature_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MP_AVG_TSENSOR_M4")
    field(DESC, "Medipix Avg Temperature Mod 4 ReadBack")
    field(SCAN, "I/O Intr")
	field(PREC, "2")
	field(EGU, "°C")
}


record(bo,"$(P)$(R)ContinuousRW") {
    #field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONTINUOUSRW")
    field(DESC, "Enable Continuous Read/Write")
    field(ZNAM, "Disable(Sequential)")
    field(ONAM, "Enable(Continuous)")
}

record(bi,"$(P)$(R)ContinuousRW_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONTINUOUSRW")
    field(DESC, "Enable Continuous Read/Write")
    field(ZNAM, "Disable(Sequential)")
    field(ONAM, "Enable(Continuous)")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)Polarity") {
    #field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))POLARITY")
    field(DESC, "Select pixel polarity")
    field(ZNAM, "Electrons")
    field(ONAM, "Holes")
    field(VAL,  "1")
}

record(bi,"$(P)$(R)Polarity_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))POLARITY")
    field(DESC, "Select pixel polarity Readback")
    field(ZNAM, "Electrons")
    field(ONAM, "Holes")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)Discriminator") {
    #field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISCRIMINATOR")
    field(DESC, "Select energy discriminator output")
    field(ZNAM, "Discriminator LOW")
    field(ONAM, "Discriminator HIGH")
    field(VAL,  "0")
}

record(bi,"$(P)$(R)Discriminator_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISCRIMINATOR")
    field(DESC, "Select energy discriminator output RBV")
    field(ZNAM, "Discriminator LOW")
    field(ONAM, "Discriminator HIGH")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)TestPulse") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TEST_PULSE")
    field(DESC, "Enable test pulse")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}

record(bi,"$(P)$(R)TestPulse_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TEST_PULSE")
    field(DESC, "Enable test pulse readback")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(SCAN, "I/O Intr")
}

# Counter depth - number of bits per pixel
record(mbbo,"$(P)$(R)CounterDepth") {
   	#field(PINI, "YES")
   	field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COUNTER_DEPTH")
    field(DESC, "Number of bits per pixel")
    field(ZRVL, "0")
    field(ZRST, "1 bit")
    field(ONVL, "1")
    field(ONST, "12 bits")
    field(TWVL, "2")
    field(TWST, "6 bits")
    field(THVL, "3")
	field(THST, "24 bits")
    field(VAL, "1")
    field(FRSV, "INVALID")
    #field(FVSV, "INVALID")
    #field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(IVOA, "1")
}

record(mbbi,"$(P)$(R)CounterDepth_RBV") {
   	field(DTYP, "asynInt32")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))COUNTER_DEPTH")
    field(DESC,"Number of bits per pixel")
    field(ZRVL, "0")
    field(ZRST, "1 bit")
    field(ONVL, "1")
    field(ONST, "12 bits")
    field(TWVL, "2")
    field(TWST, "6 bits")
    field(THVL, "3")
    field(THST, "24 bits")
   	field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)Equalization") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EQUALIZATION")
    field(DESC, "Threshold Equalization mode")
    field(ZNAM, "Equalization OFF")
    field(ONAM, "Equalization ON")
}

record(bi,"$(P)$(R)Equalization_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EQUALIZATION")
    field(DESC, "Threshold Equalization mode readback")
    field(ZNAM, "Equalization OFF")
    field(ONAM, "Equalization ON")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)PixelMode") {
    field(DESC, "Pixel Mode count photons per pixel")
    field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PIXEL_MODE")
    field(ZNAM, "Single Pixel Mode")
    field(ONAM, "Charge Summing Mode")
}

record(bi,"$(P)$(R)PixelMode_RBV") {
    field(DESC, "Pixel Mode count photons per pixel")
    field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PIXEL_MODE")
    field(ZNAM, "Single Pixel Mode")
    field(ONAM, "Charge Summing Mode")
    field(SCAN, "I/O Intr")
}

record(bo,"$(P)$(R)ExtBgSel") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EXT_BGSEL")
    field(DESC, "Select External Bang Gap mode")
    field(ZNAM, "Internal Band-Gap")
    field(ONAM, "External Band-Gap")
    field(VAL,  "0")
}

record(bi,"$(P)$(R)ExtBgSel_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EXT_BGSEL")
    field(DESC, "Select External Bang Gap mode")
    field(ZNAM, "Internal Band-Gap")
    field(ONAM, "External Band-Gap")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)LoadEqualization")
{
	field(DESC, "Load Equalization")
   	field(DTYP, "asynInt32ArrayOut")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOAD_EQUALIZATION")
    field(FTVL, "LONG")
    field(NELM, "10")
}

record(waveform, "$(P)$(R)LoadEqualization_RBV")
{
	field(DESC, "Config File to LoadEqualization Readback")
   	field(DTYP, "asynInt32ArrayIn")
    field(FTVL, "LONG")
    field(NELM, "10")	   
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOAD_EQUALIZATION")
   	field(SCAN,  "I/O Intr")
}

record(ao, "$(P)$(R)MedipixBoard")
{
	field(DESC, "Medipix Board Number")
	#field(PINI, "YES")
   	field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MEDIPIX_BOARD")
   	#field(VAL,  "0")
}

record(ai, "$(P)$(R)MedipixBoard_RBV")
{
	field(DESC, "Medipix Board Number Readback")
   	field(DTYP, "asynInt32")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MEDIPIX_BOARD")
   	field(SCAN,  "I/O Intr")
}

record(ao, "$(P)$(R)ImgChipNumberID")
{
	field(DESC, "Image Chip Number ID")
	#field(PINI, "YES")
   	field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MEDIPIX_CHIP")
   	#field(VAL,  "1")
}

record(ai, "$(P)$(R)ImgChipNumberID_RBV")
{
   	field(DESC, "Image Chip Number ID readback")
   	field(DTYP, "asynInt32")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MEDIPIX_CHIP")
   	field(SCAN,  "I/O Intr")
}


record(bo, "$(P)$(R)Reset")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESET")
	field(ZNAM, "Reset and set DACs")
	field(ONAM, "Reset and Init")
}

record(ai, "$(P)$(R)DAC_Bias_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DAC_BIAS")
	field(DESC, "External DAC Bias monitor readback")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)DAC_ThresholdEnergy0_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD0")
	field(DESC, "Threshold 0 for photon detection")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_ThresholdEnergy0")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD0")
	field(DESC, "Threshold 0 for photon detection")
}

record(ai, "$(P)$(R)DAC_ThresholdEnergy1_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD1")
	field(DESC, "Threshold 1 for photon detection")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_ThresholdEnergy1")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))THRESHOLD1")
	field(DESC, "Threshold 1 for photon detection")
}

record(ai, "$(P)$(R)DAC_Preamp_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))PREAMP")
	field(DESC, "Preamplifier current")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_Preamp")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))PREAMP")
	field(DESC, "Preamplifier current")
}

record(ai, "$(P)$(R)DAC_IKrum_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))IKRUM")
	field(DESC, "Krummenacher current")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_IKrum")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))IKRUM")
	field(DESC, "Krummenacher current")
}

record(ai, "$(P)$(R)DAC_Shaper_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SHAPER")
	field(DESC, "Shaper current")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_Shaper")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SHAPER")
	field(DESC, "Shaper current")
}

record(ai, "$(P)$(R)DAC_Disc_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC")
	field(DESC, "Discriminator current")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_Disc")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC")
	field(DESC, "Discriminator current")
}

record(ai, "$(P)$(R)DAC_DiscLS_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC_LS")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_DiscLS")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC_LS")
}

record(ai, "$(P)$(R)DAC_DiscL_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC_L")
	field(SCAN, "I/O Intr")
	field(DESC, "Low discriminator current")
}

record(ao, "$(P)$(R)DAC_DiscL")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC_L")
	field(DESC, "Low discriminator current")
}

record(ai, "$(P)$(R)DAC_Delay_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DELAY")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_Delay")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DELAY")
}

record(ai, "$(P)$(R)DAC_TPBufferIn_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_BUFFER_IN")
	field(DESC, "Test pulse input buffer current")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_TPBufferIn")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_BUFFER_IN")
	field(DESC, "Test pulse input buffer current")
}

record(ai, "$(P)$(R)DAC_TPBufferOut_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_BUFFER_OUT")
	field(DESC, "Test pulse output buffer current")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_TPBufferOut")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_BUFFER_OUT")
	field(DESC, "Test pulse output buffer current")
}

record(ai, "$(P)$(R)DAC_RPZ_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))RPZ")
	field(DESC, "Shaper pole zero voltage")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_RPZ")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))RPZ")
	field(DESC, "Shaper pole zero voltage")
}

record(ai, "$(P)$(R)DAC_GND_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))GND")
	field(DESC, "Preamplifier virtual ground voltage")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_GND")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))GND")
	field(DESC, "Preamplifier virtual ground voltage")
}

record(ai, "$(P)$(R)DAC_TPRef_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_REF")
	field(DESC, "Test pulses 1 and 2 reference voltage")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_TPRef")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_REF")
	field(DESC, "Test pulses 1 and 2 reference voltage")
}

record(ai, "$(P)$(R)DAC_FBK_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))FBK")
	field(DESC, "Preamplifier feedback voltage")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_FBK")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))FBK")
	field(DESC, "Preamplifier feedback voltage")
}

record(ai, "$(P)$(R)DAC_CAS_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CAS")
	field(DESC, "DAC cascode bias")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_CAS")
{

	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CAS")
	field(DESC, "DAC cascode bias")
	field(DRVL, "0")
	field(DRVH, "255")
}

record(ai, "$(P)$(R)DAC_TPRefA_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_REF_A")
	field(DESC, "Test pulse 1 voltage")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_TPRefA")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_REF_A")
	field(DESC, "Test pulse 1 voltage")
}

record(ai, "$(P)$(R)DAC_TPRefB_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_REF_B")
	field(DESC, "Test pulse 2 voltage")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DAC_TPRefB")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TP_REF_B")
	field(DESC, "Test pulse 2 voltage")
}

record(ai, "$(P)$(R)DAC_DiscH_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC_H")
	field(SCAN, "I/O Intr")
	field(DESC, "High discriminator current")
}

record(ao, "$(P)$(R)DAC_DiscH")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISC_H")
	field(DESC, "High discriminator current")
}

record(bo, "$(P)$(R)Reset_RDMA_Buffer") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESET_RDMA_BUFFER")
    field(DESC, "Backend Reset RDMA Buffer")
    field(ZNAM, "False")
    field(ONAM, "True")
    field(VAL,  "0")
	field(PINI, "YES")
}

record(bi, "$(P)$(R)Reset_RDMA_Buffer_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESET_RDMA_BUFFER")
    field(DESC, "Backend Reset RDMA Buffer")
    field(ZNAM, "False")
    field(ONAM, "True")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)Backend_LFSR") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BACK_LFSR")
    field(DESC, "Backend Backend LFSR")
    field(ZNAM, "False")
    field(ONAM, "True")
    field(VAL,  "0")
	field(PINI, "YES")
}

record(bi, "$(P)$(R)Backend_LFSR_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BACK_LFSR")
    field(DESC, "Backend LFSR RBV")
    field(ZNAM, "False")
    field(ONAM, "True")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)Metadata_Field") {
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))METADATA_FIELD")
	field(FTVL, "CHAR")
	field(NELM, "256")
}

record(waveform, "$(P)$(R)Metadata_Value") {
	field(DTYP, "asynOctetWrite")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))METADATA_VALUE")
	field(FTVL, "CHAR")
	field(NELM, "256")
}

record(waveform, "$(P)$(R)Metadata_Value_RBV") {
	field(DTYP, "asynOctetRead")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))METADATA_VALUE")
	field(FTVL, "CHAR")
	field(NELM, "256")
	field(SCAN, "I/O Intr")
}

# Metadata Operation mode
record(mbbo,"$(P)$(R)Metadata_OM") {
	#field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))METADATA_OM")
	field(DESC, "Metadata operation mode selection")
	field(ZRVL,"0")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(ZRST, "Set metadata")
	field(ONST, "Get metadata")
	field(TWST, "Delete metadata")
	field(THST, "Clear metadata")
	# field(VAL, "1")
}

record(mbbo,"$(P)$(R)Select_SendImage") {
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SEL_SEND_IMAGE")
	field(DESC, "OMR operation mode selection")
    field(DESC, "Send Image")  
   	field(ZRST, "Mask-bit square")						field(ZRVL, "0")
    field(ONST, "Pi-Tecnologa logo")					field(ONVL, "1")
    field(TWST, "Column counter 16-inc")				field(TWVL, "2")
    field(THST, "Line counter 16-inc")					field(THVL, "3")
    field(FRST, "Column counter")						field(FRVL, "4")
    field(FVST, "Line counter")							field(FVVL, "5")
    field(SXST, "Unique Pixel-ID (LCC)")				field(SXVL, "6")
    field(SVST, "Unique Pixel-ID (LLC)")				field(SVVL, "7")
	field(EIST, "First pixel as 0xFFF")					field(EIVL, "8")
	field(NIST, "Ramp test")							field(NIVL, "9")
	field(TEST, "Inc Start Counter 1")			field(TEVL, "10")
	field(ELST, "Inc Start Counter 2")			field(ELVL, "11")
	field(TVST, "Test Pulse Even Lines")				field(TVVL, "12")
	field(TTST, "Test Pulse Odd Lines")					field(TTVL, "13")
	field(FTST, "Test Pulse Even Columns")				field(FTVL, "14")
	field(FFST, "Test Pulse Odd Columns")				field(FFVL, "15")
}

record(mbbi,"$(P)$(R)Select_SendImage_RBV") {
   	field(DTYP, "asynInt32")
   	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SEL_SEND_IMAGE")
    field(DESC, "Send Image readback")  
   	field(ZRST, "Mask-bit square")						field(ZRVL, "0")
    field(ONST, "Pi-Tecnologa logo")					field(ONVL, "1")
    field(TWST, "Column counter 16-inc")				field(TWVL, "2")
    field(THST, "Line counter 16-inc")					field(THVL, "3")
    field(FRST, "Column counter")						field(FRVL, "4")
    field(FVST, "Line counter)")						field(FVVL, "5")
    field(SXST, "Unique Pixel-ID (LCC)")				field(SXVL, "6")
    field(SVST, "Unique Pixel-ID (LLC)")				field(SVVL, "7")
	field(EIST, "First pixel as 0xFFF")					field(EIVL, "8")
	field(NIST, "Ramp test")							field(NIVL, "9")
	field(TEST, "Inc Start Counter 1")					field(TEVL, "10")
	field(ELST, "Inc Start Counter 2")					field(ELVL, "11")
	field(TVST, "Test Pulse Even Lines")				field(TVVL, "12")
	field(TTST, "Test Pulse Odd Lines")					field(TTVL, "13")
	field(FTST, "Test Pulse Even Columns")				field(FTVL, "14")
	field(FFST, "Test Pulse Odd Columns")				field(FFVL, "15")
   	field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)SendImage") {
	field(DTYP, "asynInt32")
	field(DESC, "Send Image test to detector")
	field(VAL,  "1")
	field(ZNAM, "No send")
	field(ONAM, "Send")
	#field(HIGH, "0.1")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SEND_IMAGE")
}

record(ai, "$(P)$(R)ConfigDiscL_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONFIG_DISCL")
	field(SCAN, "I/O Intr")
	field(DESC, "DAC Config DiscL value")
}

record(ao, "$(P)$(R)ConfigDiscL")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONFIG_DISCL")
	field(DESC, "DAC Config DiscL value")
	field(VAL, "0")
	field(DRVL, "0")
	field(DRVH, "4095")
}

record(bo, "$(P)$(R)CheckSensors") {
	field(DTYP, "asynInt32")
	field(DESC, "Check and disable defective sensors")
	field(VAL,  "1")
	field(ZNAM, "No Check")
	field(ONAM, "Check")
	#field(HIGH, "0.1")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CHECK_SENSORS")
}

record(waveform, "$(P)$(R)DisabledSensorsM1_RBV")
{
	field(DESC, "Disabled Sensors Reaback")
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISABLED_SENSORS_M1")
    field(FTVL, "LONG")
    field(NELM, "36")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)DisabledSensorsM2_RBV")
{
	field(DESC, "Disabled Sensors Reaback")
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISABLED_SENSORS_M2")
    field(FTVL, "LONG")
    field(NELM, "36")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)DisabledSensorsM3_RBV")
{
	field(DESC, "Disabled Sensors Reaback")
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISABLED_SENSORS_M3")
    field(FTVL, "LONG")
    field(NELM, "36")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)DisabledSensorsM4_RBV")
{
	field(DESC, "Disabled Sensors Reaback")
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISABLED_SENSORS_M4")
    field(FTVL, "LONG")
    field(NELM, "36")
    field(SCAN, "I/O Intr")
}


record(bi,"$(P)$(R)SendDAC_Done_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SEND_DAC_DONE")
    field(DESC, "Send DAC is done readback")
    field(ZNAM, "Sending")
    field(ONAM, "Done")
    field(SCAN, "I/O Intr")
}

record(mbbo,"$(P)$(R)AllModules") {
    field(DESC, "Send to all modules")
    field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ALL_MODULES")
	field(ZRVL, "0")
    field(ZRST, "Individual chip")
	field(ONVL, "1")
    field(ONST, "All chips one module")
	field(TWVL, "2")
    field(TWST, "One chip all modules")
	field(THVL, "3")
	field(THST, "All chips all Modules")
	field(VAL,  "0")
	field(PINI, "YES")
}

record(mbbi,"$(P)$(R)AllModules_RBV") {
    field(DESC, "Send to all modules RBV")
    field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ALL_MODULES")
	field(ZRVL, "0")
    field(ZRST, "Individual chip")
	field(ONVL, "1")
    field(ONST, "All chips one module")
	field(TWVL, "2")
    field(TWST, "One chip all modules")
	field(THVL, "3")
	field(THST, "All chips all Modules")
	field(SCAN, "I/O Intr")
}

record(mbbo,"$(P)$(R)MB_SendMode") {
    field(DESC, "Select MB parameters send mode")
    field(DTYP, "asynInt32")
   	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_SEND_MODE")
    field(ZRST, "One MB low flex") 	  field(ZRVL, "0")
	field(ONST, "One MB high flex") 	  field(ONVL, "1")
	field(TWST, "One MB all flex") 	  field(TWVL, "2")	
	field(THST, "All flex one module")	  field(THVL, "3")
	field(FRST, "All flex all modules")   field(FRVL, "4")
	field(VAL,  "0")
	field(PINI, "YES")
}

record(mbbi,"$(P)$(R)MB_SendMode_RBV") {
    field(DESC, "Select MB parameters send mode RBV")
    field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MB_SEND_MODE")
    field(ZRST, "One MB low flex") 	  field(ZRVL, "0")
	field(ONST, "One MB high flex") 	  field(ONVL, "1")
	field(TWST, "One MB all flex") 	  field(TWVL, "2")	
	field(THST, "All flex one module")	  field(THVL, "3")
	field(FRST, "All flex all modules")   field(FRVL, "4")
	field(SCAN, "I/O Intr")
}

record(mbbo,"$(P)$(R)BulkProcessing") {
	field(DESC,"Bulk Processing Configuration")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ENABLE_BULK_PROCESSING")	
    field(ZRVL,"0")
    field(ZRST,"Automatic")
    field(ONVL,"1")
    field(ONST,"Enable Bulk Processing")
    field(TWVL,"2")
    field(TWST,"Disable Bulk Processing")
	field(VAL,  "2")
	field(PINI, "YES")	
}

record(waveform, "$(P)$(R)IndexDestinationID")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))INDEX_ID")
    field(FTVL, "CHAR")
    field(NELM, "30")
}

record(bo, "$(P)$(R)IndexEnable") {
	field(DTYP, "asynInt32")
	field(DESC, "Enable Index Visualization")
	field(VAL,  "0")
	field(ZNAM, "No")
	field(ONAM, "Yes")	
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))INDEX_ENABLE")
}

record(bo, "$(P)$(R)AcquisitionToSharedMemoryEnable") {
	field(DTYP, "asynInt32")
	field(DESC, "Write Acquisition to shared memory")
	field(VAL,  "0")
	field(ZNAM, "No")
	field(ONAM, "Yes")	
	field(PINI, "YES")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ACQ_TO_SHMEM_ENABLE")
}


record(mbbo,"$(P)$(R)IndexSendMode") {
	field(DESC,"Index Send Mode")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))INDEX_SEND_MODE")	
    field(ZRVL,"0")
    field(ZRST,"Send Frames")
    field(ONVL,"1")
    field(ONST,"Send Volume")
	field(VAL,  "0")
	field(PINI, "YES")	
}


record(longin, "$(P)$(R)IndexSentFramesCounter_RBV") {
	field(DESC, "Frames sent to index")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))INDEX_COUNTER")
    field(SCAN, "I/O Intr")
}


record(longin, "$(P)$(R)ProcessedAcquisitionCounter_RBV") {
	field(DESC, "Acquisitions processed ready to save")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PROCESSED_COUNTER")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)Distance")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISTANCE")
	field(DESC, "Sample distance from detector")
	field(VAL, "5000")
	field(PINI, "YES")
	field(DRVL, "0")

}

record(waveform, "$(P)$(R)logFile")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOGFILE")
    field(FTVL, "CHAR")
    field(NELM, "40")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)LoadEqualizationStart") {
	field(DTYP, "asynInt32")
	field(DESC, "Start Equalization")
	field(VAL,  "1")
	field(ZNAM, "Idle")
	field(ONAM, "Equalize")
	#field(HIGH, "0.1")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOAD_EQUALIZATION_START")
}

record(waveform, "$(P)$(R)IOCStatusMessage_RBV") {
	field(DESC, "IOC Status Message")
	field(NELM, "100")
	field(FTVL, "UCHAR")
	field(DTYP, "asynInt8ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))IOC_STATUS_MESSAGE")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)ServerStatusMessage_RBV") {
	field(DESC, "Server Status Message")
	field(NELM, "100")
	field(FTVL, "UCHAR")
	field(DTYP, "asynInt8ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SERVER_STATUS_MESSAGE")
    field(SCAN, "I/O Intr")
}


record(bo, "$(P)$(R)TraceMaskFlow") {
	field(DTYP, "asynInt32")
	field(DESC, "Flow Trace Mask")
	field(VAL,  "0")
	field(ZNAM, "No mask")
	field(ONAM, "Mask")

	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRACE_MASK_FLOW")
}

record(bo, "$(P)$(R)TraceMaskError") {
	field(DTYP, "asynInt32")
	field(DESC, "Error Trace Mask")
	field(VAL,  "0")
	field(ZNAM, "No mask")
	field(ONAM, "Mask")

	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRACE_MASK_ERROR")
}

record(bo, "$(P)$(R)TraceMaskWarning") {
	field(DTYP, "asynInt32")
	field(DESC, "Warning Trace Mask")
	field(VAL,  "0")
	field(ZNAM, "No mask")
	field(ONAM, "Mask")

	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRACE_MASK_WARNING")
}

record(bo, "$(P)$(R)TraceMaskDriverIO") {
	field(DTYP, "asynInt32")
	field(DESC, "DriverIO Trace Mask")
	field(VAL,  "0")
	field(ZNAM, "No mask")
	field(ONAM, "Mask")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRACE_MASK_DRIVERIO")
}

record(ao, "$(P)$(R)TraceMask")
{
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRACE_MASK")
	field(DESC, "Trace Masks")
	field(VAL, "0")
	field(PINI, "YES")
	field(DRVL, "0")
}

record(longin, "$(P)$(R)BackendStats_RBV") {
	field(DESC, "Backend stats update")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BACKEND_STATS")
    field(SCAN, ".1 second")
}

record(longin, "$(P)$(R)IndexError_RBV") {
	field(DESC, "Index error")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))INDEX_ERROR")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)RxError_RBV") {
	field(DESC, "Reception error")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RX_ERROR")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M1:RxError_RBV") {
	field(DESC, "Module 1 reception error")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M1_RX_ERROR")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M2:RxError_RBV") {
	field(DESC, "Module 2 reception error")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M2_RX_ERROR")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M3:RxError_RBV") {
	field(DESC, "Module 3 reception error")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M3_RX_ERROR")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M4:RxError_RBV") {
	field(DESC, "Module 4 reception error")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M4_RX_ERROR")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M1:LostFrameCount_RBV") {
	field(DESC, "Module 1 lost frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M1_LOST_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M2:LostFrameCount_RBV") {
	field(DESC, "Module 2 lost frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M2_LOST_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M3:LostFrameCount_RBV") {
	field(DESC, "Module 3 lost frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M3_LOST_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M4:LostFrameCount_RBV") {
	field(DESC, "Module 4 lost frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M4_LOST_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M1:RxFrameCount_RBV") {
	field(DESC, "Module 1 received frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M1_RECEIVED_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M2:RxFrameCount_RBV") {
	field(DESC, "Module 2 received frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M2_RECEIVED_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M3:RxFrameCount_RBV") {
	field(DESC, "Module 3 received frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M3_RECEIVED_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M4:RxFrameCount_RBV") {
	field(DESC, "Module 4 received frame count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M4_RECEIVED_FRAME_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M1:RxAcquisitionCount_RBV") {
	field(DESC, "Module 1 received acquisition count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M1_RECEIVED_ACQUISITION_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M2:RxAcquisitionCount_RBV") {
	field(DESC, "Module 2 received acquisition count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M2_RECEIVED_ACQUISITION_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M3:RxAcquisitionCount_RBV") {
	field(DESC, "Module 3 received acquisition count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M3_RECEIVED_ACQUISITION_COUNT")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)M4:RxAcquisitionCount_RBV") {
	field(DESC, "Module 4 received acquisition count")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))M4_RECEIVED_ACQUISITION_COUNT")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)M1:Backend_BufferUsed_RBV")
{
	field(DTYP, "asynFloat64")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))M1_RDMA_BUFFER")
	field(SCAN, "I/O Intr")
	field(DESC, "M1 Backend RDMA buffer usage")
	field(PREC, "1")
	field(EGU, "%")
}

record(ai, "$(P)$(R)M2:Backend_BufferUsed_RBV")
{
	field(DTYP, "asynFloat64")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))M2_RDMA_BUFFER")
	field(SCAN, "I/O Intr")
	field(DESC, "M2 Backend RDMA buffer usage")
	field(PREC, "1")
	field(EGU, "%")
}

record(ai, "$(P)$(R)M3:Backend_BufferUsed_RBV")
{
	field(DTYP, "asynFloat64")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))M3_RDMA_BUFFER")
	field(SCAN, "I/O Intr")
	field(DESC, "M3 Backend RDMA buffer usage")
	field(PREC, "1")
	field(EGU, "%")
}

record(ai, "$(P)$(R)M4:Backend_BufferUsed_RBV")
{
	field(DTYP, "asynFloat64")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))M4_RDMA_BUFFER")
	field(SCAN, "I/O Intr")
	field(DESC, "M4 Backend RDMA buffer usage")
	field(PREC, "1")
	field(EGU, "%")
}

record(ai, "$(P)$(R)Backend_BufferUsed_RBV")
{
       field(DTYP, "asynFloat64")
       field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))BACK_BUFFER")
       field(SCAN, ".1 second")
       field(DESC, "Backend buffer used")
       field(PREC, "1")
       field(EGU, "%")
}
